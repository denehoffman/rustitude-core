#!/usr/bin/env python3
"""
Convert ROOT file to a Rustitude-compatible format.

Usage:
  convert <root_file_path> [--output <output_path>] [--tree=<tree_name>] [--parquet]
  convert -h | --help

Options:
  -h --help              Show this help message and exit.
  --output <output_path> Specify the output path for the file.
  --parquet              Output to .parquet instead of .root
  --tree=<tree_name>     Specify the name of the TTree in the ROOT file.
"""

# import polars as pl
import pandas as pd
import uproot
from docopt import docopt


def convert(root_file_path, output_parquet_path=None, tree_name=None):
    with uproot.open(root_file_path) as root_file:
        tree_name = root_file.keys()[0] if tree_name is None else tree_name

        tree = root_file[tree_name]
        out_file = uproot.recreate(root_file_path.replace(".root", "_rust.root"))
        out_file[tree_name] = tree.arrays(library="np")


def convert_parquet(root_file_path, output_parquet_path=None, tree_name=None):
    with uproot.open(root_file_path) as root_file:
        tree_name = root_file.keys()[0] if tree_name is None else tree_name

        tree = root_file[tree_name]
        numpy_arrays = tree.arrays(library="np")
        dataframe = pd.DataFrame(numpy_arrays)
        # dataframe = pl.DataFrame(numpy_arrays)

    if output_parquet_path is None:
        output_parquet_path = f"{root_file_path.replace('.root', '.parquet')}"

    # dataframe.write_parquet(output_parquet_path)
    dataframe.to_parquet(output_parquet_path)


if __name__ == "__main__":
    arguments = docopt(__doc__)
    root_file_path = arguments["<root_file_path>"]
    output_path = arguments["--output"]
    tree_name = arguments["--tree"]
    if arguments["--parquet"]:
        convert_parquet(root_file_path, output_path, tree_name)
    else:
        convert(root_file_path, output_path, tree_name)
